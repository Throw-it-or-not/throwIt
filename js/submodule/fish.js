import elements from './dom.js';
import {updateModalUI} from "./catch.js";

// import {bindEvents} from "./event.js";


// Ïï±ÏùÑ ÏãúÏûëÌïòÎäî Ìï®Ïàò
export function start() {

    // bindEvents(); // Ïù¥Î≤§Ìä∏ Ïã§Ìñâ

    // DOM ÎîîÏä§Ìä∏Îü≠Ï≥êÎßÅ
    const {
        $sea,
        $fish,
        $seaBg,
        $modalOverlay,
        $thowitWrap,
        $scoreArea,
        $startBtn,
        $viewPort,
        $descriptionBtn,
        $gamDescriptionScreen,
        $homeButton,
        $resultCloseBtn,
        $resultBox,
        $score,
        $hpBar,
        $overOverlay,
        $restartBtn,
    } = elements;

    let intervalId = null;
    let timerId = null;
    let stopped = false;
    let currentFishNumber = null;
    let totalScore = 0;

    // ÎÇöÏãúÎåÄ ÎÇ¥Íµ¨ÎèÑ Ïö© Î≥ÄÏàò
    let hp = 10;
    let currentHp = getComputedStyle($hpBar).height.slice(0, -1);

    showHp(hp);

    const seaWidth = $thowitWrap.offsetWidth;
    const seaHeight = $thowitWrap.offsetHeight - 140;

    const maxX = seaWidth - $fish.offsetWidth - 100;
    const maxY = seaHeight - $fish.offsetHeight - 100;

    const species = [
        'url(/image/fish-01.png)',
        'url(/image/fish-02.png)',
        'url(/image/fish-03.png)',
        'url(/image/fish-04.png)',
        'url(/image/fish-05.png)'
    ];




// Math.floor(Math.random() * (y - x + 1)) + x;


    function makeFish(){
        const random = Math.floor(Math.floor(Math.random() * 5));

        switch (random) {
            case 0:
                $fish.style.backgroundImage = species[0];
                break;
            case 1:
                $fish.style.backgroundImage = species[1];
                break;
            case 2:
                $fish.style.backgroundImage = species[2];
                break;
            case 3:
                $fish.style.backgroundImage = species[3];
                break;
            case 4:
                $fish.style.backgroundImage = species[4];
                break;
        }

        return random;
    }

    function showFish(){
        const x = Math.floor(Math.random() * maxX) + 1;
        const y = Math.floor(Math.random() * maxY) +1;

        timerId = setTimeout(() => {

            if(!stopped){

                currentFishNumber = makeFish();

                $fish.style.left = `${x}px`;
                $fish.style.top = `${y}px`;

                $fish.classList.add('show');
            }

        }, 1000)

    }

    function writeLog(score) {
        totalScore += score
        $score.textContent = totalScore;
    }

    function decreaseHp(finalScore, fishingScore){
        if(finalScore === 0){
            console.log(`Ïã§Ìå® hp Í∞êÏÜå ÏãúÏûë`)
            switch (fishingScore){
                case 10:
                    hp -= 10;
                    break;
                case 20:
                    hp -= 20;
                    break;
                case 30:
                    hp -= 30;
                    break;
                case 40:
                    hp -= 40;
                    break;
                case 50:
                    hp -= 50;
                    break;
            }
            return hp;
        }
        else{
            switch (finalScore){
                case 10:
                case 20:
                    hp -= 5;
                    break;
                case 30:
                case 40:
                    hp -= 10;
                    break;
                default:
                    hp -= 15;
                    break;
            }
            return hp;
        }
    }

    function showHp(hp) {
        console.log(currentHp)
        currentHp = hp;
        console.log(currentHp)
        $hpBar.style.height = `${currentHp}%`;
    }

    function openGameOverModal(){

        showHp(hp);

        $overOverlay.style.display = 'flex';

        stopped = true;

        if(stopped){
            $fish.classList.remove('show');
            clearTimeout(timerId);
            clearInterval(intervalId);

            intervalId = null;
        }
    }

    function initialGame(){
        $viewPort.style.display = 'flex';

        $overOverlay.style.display = 'none';
        $sea.style.display = 'none';
    }


    // ======== Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï ========== //
    function startFishGame() {
        if (intervalId !== null) return; // Ï§ëÎ≥µ Î∞©ÏßÄ

        if(hp <= 0){
            openGameOverModal();
            return;
        }

        intervalId = setInterval(() => {
            $seaBg.style.animationPlayState = 'running';
            showFish();
        }, 1000);
    }

    $fish.addEventListener('click', e => {

        stopped = true;
        if(stopped){

            $seaBg.style.animationPlayState = 'paused';
            $fish.classList.remove('show');
            clearTimeout(timerId);
            clearInterval(intervalId);
            intervalId = null;

            $modalOverlay.style.display = 'flex';
        }

        updateModalUI(currentFishNumber, (finalScore, fishingScore) => {
            console.log(`üéØ ÏµúÏ¢Ö Ï†êÏàò: ${finalScore}`);
            // Ïó¨Í∏∞ÏÑú Ïù¥ÌõÑ UI ÏóÖÎç∞Ïù¥Ìä∏ÎÇò Í≤åÏûÑ ÏßÑÌñâ Í∞ÄÎä•
            stopped = false;
            writeLog(finalScore);
            showHp(decreaseHp(finalScore, fishingScore));

        });

    })

    // event.js ÎÇ¥Ïö©
    //ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
    $startBtn.addEventListener('click', e => {
        // Ïù∏Ìä∏Î°ú ÌôîÎ©¥ ÏÇ¨ÎùºÏßÄÍ≤å ÌïòÍ∏∞
        $viewPort.style.display = 'none';

        // Î∞îÎã§ Ïä§ÌÖåÏù¥ÏßÄ ÌôîÎ©¥ Î∂àÎü¨Ïò§Í∏∞
        $sea.style.display = 'block';

        startFishGame();

    });

    // Í≤åÏûÑ ÏÑ§Î™Ö Î≤ÑÌäº Ïù¥Î≤§Ìä∏
    $descriptionBtn.addEventListener('click', e => {
        // Ïù∏Ìä∏Î°ú ÌôîÎ©¥ ÏÇ¨ÎùºÏßÄÍ≤å ÌïòÍ∏∞
        $viewPort.style.display = 'none';

        // Í≤åÏûÑ ÏÑ§Î™Ö ÌôîÎ©¥ Î∂àÎü¨Ïò§Í∏∞
        $gamDescriptionScreen.style.display = 'flex';

    });

    // Í≤åÏûÑ ÏÑ§Î™Ö ÌôîÎ©¥Ïùò Î©îÏù∏ÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÎäî Î≤ÑÌäº Ïù¥Î≤§Ìä∏
    $homeButton.addEventListener('click', e => {
        // Í≤åÏûÑ ÏÑ§Î™Ö ÌôîÎ©¥ ÏÇ¨ÎùºÏßÄÍ≤å ÌïòÍ∏∞
        $gamDescriptionScreen.style.display = 'none';

        //Ïù∏Ìä∏Î°ú ÌôîÎ©¥ ÎÇòÌÉÄÎÇòÍ≤å ÌïòÍ∏∞
        $viewPort.style.display = 'flex';

    });

    // Í≤∞Í≥º Ï∞ΩÏóêÏÑú Îã´Í∏∞ Î≤ÑÌäº ÎàÑÎ•¥Î©¥ Í≤∞Í≥º Ï∞ΩÍ≥º Î™®Îã¨ Îã´Ìûò.
    $resultCloseBtn.addEventListener('click', e => {
        $modalOverlay.style.display = 'none';
        $resultBox.style.display = 'none';

        startFishGame();
    });

    // Í≤åÏûÑ Ïò§Î≤Ñ Î™®Îã¨ÏóêÏÑú Î©îÏù∏ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞ Î≤ÑÌäº ÌÅ¥Î¶≠
    $restartBtn.addEventListener('click', e => {
        // Î∂àÎü¨Ïò§Í∏∞ Í∏∞Îä• ÏôÑÏÑ± Ïãú Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóê Ï†ÄÏû•

        // Î©îÏù∏ÏúºÎ°ú ÎÇòÍ∞ÄÍ≥† Í≤åÏûÑ Ï¥àÍ∏∞Ìôî
        initialGame();
    })

    // Ïö∞ÌÅ¥Î¶≠ Î©îÎâ¥ ÎßâÍ∏∞
    document.addEventListener('contextmenu', (e) => e.preventDefault());
}


